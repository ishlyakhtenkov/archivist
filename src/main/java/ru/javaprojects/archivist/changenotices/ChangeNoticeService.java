package ru.javaprojects.archivist.changenotices;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;
import ru.javaprojects.archivist.changenotices.model.Change;
import ru.javaprojects.archivist.changenotices.model.ChangeNotice;
import ru.javaprojects.archivist.changenotices.repository.ChangeNoticeRepository;
import ru.javaprojects.archivist.changenotices.repository.ChangeRepository;
import ru.javaprojects.archivist.changenotices.to.ChangeNoticeTo;
import ru.javaprojects.archivist.common.error.IllegalRequestDataException;
import ru.javaprojects.archivist.common.error.NotFoundException;
import ru.javaprojects.archivist.common.util.FileUtil;
import ru.javaprojects.archivist.documents.model.ContentFile;
import ru.javaprojects.archivist.documents.model.Document;

import java.time.LocalDate;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ChangeNoticeService {
    private final ChangeNoticeRepository repository;
    private final ChangeRepository changeRepository;
    private final ChangeNoticeUtil changeNoticeUtil;

    @Value("${content-path.change-notices}")
    private String contentPath;

    public Page<ChangeNotice> getAll(Pageable pageable) {
        return repository.findAllByAutoGeneratedIsFalseOrderByName(pageable);
    }

    public Page<ChangeNotice> getAll(Pageable pageable, String keyword) {
        return repository.findAllByNameContainsIgnoreCaseAndAutoGeneratedIsFalseOrderByName(pageable, keyword);
    }

    @Transactional
    public ChangeNotice create(ChangeNoticeTo changeNoticeTo) {
        Assert.notNull(changeNoticeTo, "changeNoticeTo must not be null");
        if (changeNoticeTo.getFile() == null) {
            throw new IllegalRequestDataException("Change notice file is not present");
        }
        ChangeNotice changeNotice = repository.findByNameIgnoreCaseAndAutoGeneratedIsTrue(changeNoticeTo.getName())
                .orElseGet(() -> changeNoticeUtil.createNewFromTo(changeNoticeTo));
        if (!changeNotice.isNew()) {
            changeNoticeUtil.updateFromTo(changeNotice, changeNoticeTo);
        }
        repository.saveAndFlush(changeNotice);
        String fileName = changeNoticeTo.getFile().getOriginalFilename();
        FileUtil.upload(changeNoticeTo.getFile(), contentPath + changeNoticeTo.getName().toUpperCase() + "/", fileName);
        return changeNotice;
    }

    @Transactional
    public ChangeNotice update(ChangeNoticeTo changeNoticeTo) {
        Assert.notNull(changeNoticeTo, "changeNoticeTo must not be null");
        ChangeNotice changeNotice = repository.findWithChangesById(changeNoticeTo.getId())
                .orElseThrow(() -> new NotFoundException("Entity with id=" + changeNoticeTo.getId() + " not found"));
        if (!changeNoticeTo.getName().equalsIgnoreCase(changeNotice.getName())) {
            repository.deleteByNameIgnoreCaseAndAutoGeneratedIsTrue(changeNoticeTo.getName());
            repository.flush();
        }
        String oldName = changeNotice.getName();
        ContentFile oldFile = changeNotice.getFile();
        repository.saveAndFlush(changeNoticeUtil.updateFromTo(changeNotice, changeNoticeTo));
        if (changeNoticeTo.getFile() != null) {
            FileUtil.deleteDir(contentPath + oldName);
            String fileName = changeNoticeTo.getFile().getOriginalFilename();
            FileUtil.upload(changeNoticeTo.getFile(), contentPath + changeNoticeTo.getName().toUpperCase() + "/", fileName);
        } else if (!changeNoticeTo.getName().equalsIgnoreCase(oldName)) {
            FileUtil.moveFile(contentPath + oldName + "/" + oldFile.getFileName(),
                    contentPath + changeNoticeTo.getName().toUpperCase());
            FileUtil.deleteDirIfEmpty(contentPath + oldName);
        }
        return changeNotice;
    }

    public ChangeNotice get(long id) {
        return repository.getExisted(id);
    }

    public ChangeNotice getWithChanges(long id) {
        return repository.findWithChangesAndDeveloperByIdAndAutoGeneratedIsFalse(id)
                .orElseThrow(() -> new NotFoundException("Entity with id=" + id + " not found"));
    }

    public ChangeNotice getByName(String name) {
        return repository.findByNameIgnoreCase(name)
                .orElseThrow(() -> new NotFoundException("Change notice " + name + " not found"));
    }

    public ChangeNotice getWithChangesByName(String name) {
        return repository.findWithChangesAndDeveloperByName(name)
                .orElseThrow(() -> new NotFoundException("Change notice " + name + " not found"));
    }

    public List<Change> getChangesByDocument(long documentId) {
        return changeRepository.findAllByDocument_IdOrderByChangeNumberDesc(documentId);
    }

    @Transactional
    public void deleteWithFile(long id) {
        ChangeNotice changeNotice = repository.getExisted(id);
        repository.deleteExisted(changeNotice.id());
        FileUtil.delete(contentPath + changeNotice.getFile().getFileLink());
        FileUtil.deleteDirIfEmpty(contentPath + changeNotice.getName());
    }

    public void delete(long id) {
        repository.deleteExisted(id);
    }

    @Transactional
    public void deleteChange(long changeId) {
        Change change = changeRepository.findById(changeId)
                .orElseThrow(() -> new NotFoundException("Entity with id=" + changeId + " not found"));
        changeRepository.delete(change);
        ChangeNotice changeNotice = change.getChangeNotice();
        if (changeNotice.isAutoGenerated() && changeRepository.countAllByChangeNotice_Id(changeNotice.id()) == 0) {
            delete(changeNotice.id());
        }
    }

    public List<Change> getChangesForAutogenerated(String name) {
        return changeRepository.findAllForAutogeneratedChangeNotice(name);
    }

    @Transactional
    public Change createChange(String changeNoticeName, LocalDate changeDate, Integer changeNumber, Document document) {
        ChangeNotice changeNotice = repository.findWithChangesByNameIgnoreCase(changeNoticeName)
                .orElseGet(() -> ChangeNotice.autoGenerate(changeNoticeName, changeDate));
        if (!changeNotice.getReleaseDate().equals(changeDate)) {
            throw new IllegalRequestDataException("Change notice " + changeNotice.getName() +
                    " already exists and has release date: " + changeNotice.getReleaseDate());
        }
        changeNotice.addChange(new Change(null, document, changeNotice, changeNumber));
        repository.save(changeNotice);
        return changeNotice.getChanges().get(changeNotice.getChanges().size() - 1);
    }

    public Change getChange(long id) {
        return changeRepository.getExisted(id);
    }
}
