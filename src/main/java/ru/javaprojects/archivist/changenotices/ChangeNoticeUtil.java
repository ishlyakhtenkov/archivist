package ru.javaprojects.archivist.changenotices;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import ru.javaprojects.archivist.changenotices.model.Change;
import ru.javaprojects.archivist.changenotices.model.ChangeNotice;
import ru.javaprojects.archivist.changenotices.to.ChangeNoticeTo;
import ru.javaprojects.archivist.changenotices.to.ChangeTo;
import ru.javaprojects.archivist.common.to.BaseTo;
import ru.javaprojects.archivist.documents.model.ContentFile;
import ru.javaprojects.archivist.documents.model.Document;
import ru.javaprojects.archivist.documents.repository.DocumentRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Component
@RequiredArgsConstructor
public class ChangeNoticeUtil {
    private final DocumentRepository documentRepository;

    public ChangeNotice createNewFromTo(ChangeNoticeTo changeNoticeTo) {
        ChangeNotice changeNotice = new ChangeNotice(null, changeNoticeTo.getName(), changeNoticeTo.getReleaseDate(),
                changeNoticeTo.getChangeReasonCode(), changeNoticeTo.getDeveloper(), createContentFile(changeNoticeTo));
        List<ChangeTo> changeTos = changeNoticeTo.getChanges();
        changeTos.forEach(changeTo -> {
            Document document = documentRepository.findByDecimalNumberIgnoreCase(changeTo.getDecimalNumber())
                    .orElseGet(() -> documentRepository.save(Document.autoGenerate(changeTo.getDecimalNumber())));
            changeNotice.addChange(new Change(changeTo.getId(), document, changeTo.getChangeNumber()));
        });
        return changeNotice;
    }

    public ChangeNotice updateFromTo(ChangeNotice changeNotice, ChangeNoticeTo changeNoticeTo) {
        String oldName = changeNotice.getName();
        changeNotice.setName(changeNoticeTo.getName());
        changeNotice.setReleaseDate(changeNoticeTo.getReleaseDate());
        changeNotice.setChangeReasonCode(changeNoticeTo.getChangeReasonCode());
        changeNotice.setDeveloper(changeNoticeTo.getDeveloper());
        changeNotice.setAutoGenerated(false);
        if (changeNoticeTo.getFile() != null) {
            changeNotice.setFile(createContentFile(changeNoticeTo));
        } else if (!changeNoticeTo.getName().equals(oldName)) {
            changeNotice.getFile().setFileLink(changeNotice.getName() + "/" + changeNotice.getFile().getFileName());
        }

        List<ChangeTo> newChangeTos = new ArrayList<>();
        Map<Long, ChangeTo> notNewChangeTos = changeNoticeTo.getChanges().stream()
                .peek(changeTo -> {
                    if (changeTo.isNew()) {
                        newChangeTos.add(changeTo);
                    }
                })
                .filter(changeTo -> !changeTo.isNew())
                .collect(Collectors.toMap(BaseTo::getId, changeTo -> changeTo));
        changeNotice.getChanges().removeIf(change -> !notNewChangeTos.containsKey(change.getId()));
        changeNotice.getChanges().forEach(change -> {
            ChangeTo changeTo = notNewChangeTos.get(change.getId());
            if (!change.getDocument().getDecimalNumber().equals(changeTo.getDecimalNumber())) {
                change.setDocument(documentRepository.findByDecimalNumberIgnoreCase(changeTo.getDecimalNumber())
                        .orElseGet(() -> documentRepository.save(Document.autoGenerate(changeTo.getDecimalNumber()))));
            }
            change.setChangeNumber(changeTo.getChangeNumber());
        });
        newChangeTos.forEach(changeTo -> {
            Document document = documentRepository.findByDecimalNumberIgnoreCase(changeTo.getDecimalNumber())
                    .orElseGet(() -> documentRepository.save(Document.autoGenerate(changeTo.getDecimalNumber())));
            changeNotice.addChange(new Change(null, document, changeTo.getChangeNumber()));
        });
        return changeNotice;
    }

    public ChangeNoticeTo asTo(ChangeNotice changeNotice) {
        List<ChangeTo> changeTos = changeNotice.getChanges().stream()
                .map(change -> new ChangeTo(change.getId(), change.getDocument().getDecimalNumber(), change.getChangeNumber()))
                .toList();
        return new ChangeNoticeTo(changeNotice.getId(), changeNotice.getName(), changeNotice.getReleaseDate(),
                changeNotice.getChangeReasonCode(), changeNotice.getDeveloper(), changeTos);
    }

    private ContentFile createContentFile(ChangeNoticeTo changeNoticeTo) {
        String filename = changeNoticeTo.getFile().getOriginalFilename();
        return new ContentFile(filename, changeNoticeTo.getName() + "/" + filename);
    }
}
