package ru.javaprojects.archivist.changenotices.web;

import lombok.AllArgsConstructor;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.validation.Errors;
import ru.javaprojects.archivist.changenotices.to.ChangeNoticeTo;
import ru.javaprojects.archivist.changenotices.repository.ChangeNoticeRepository;

import java.util.Objects;

import static ru.javaprojects.archivist.common.error.Constants.DUPLICATE_ERROR_CODE;

@Component
@AllArgsConstructor
public class UniqueChangeNoticeNameValidator implements org.springframework.validation.Validator {
    private final ChangeNoticeRepository repository;

    @Override
    public boolean supports(@NonNull Class<?> clazz) {
        return ChangeNoticeTo.class.isAssignableFrom(clazz);
    }

    @Override
    public void validate(@NonNull Object target, @NonNull Errors errors) {
        ChangeNoticeTo changeNoticeTo = ((ChangeNoticeTo) target);
        if (StringUtils.hasText(changeNoticeTo.getName())) {
            repository.findByNameIgnoreCase(changeNoticeTo.getName())
                    .ifPresent(dbChangeNotice -> {
                        if (!dbChangeNotice.isAutoGenerated() && (changeNoticeTo.isNew()  ||
                                (!changeNoticeTo.isNew() && !Objects.equals(changeNoticeTo.getId(), dbChangeNotice.getId())))) {
                            errors.rejectValue("name", DUPLICATE_ERROR_CODE, "Change notice with this name already exists");
                        }
                    });
        }
    }
}
