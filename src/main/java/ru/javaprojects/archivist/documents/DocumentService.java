package ru.javaprojects.archivist.documents;

import jakarta.validation.Valid;
import jakarta.validation.groups.Default;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.validation.annotation.Validated;
import ru.javaprojects.archivist.common.error.NotFoundException;
import ru.javaprojects.archivist.common.util.validation.NotAutoGenerated;
import ru.javaprojects.archivist.documents.model.Applicability;
import ru.javaprojects.archivist.documents.model.Document;
import ru.javaprojects.archivist.documents.repository.ApplicabilityRepository;
import ru.javaprojects.archivist.documents.repository.DocumentRepository;
import ru.javaprojects.archivist.documents.to.ApplicabilityTo;

import java.util.List;

@Service
@AllArgsConstructor
@Validated({NotAutoGenerated.class, Default.class})
public class DocumentService {
    private final DocumentRepository repository;
    private final ApplicabilityRepository applicabilityRepository;

    public Page<Document> getAll(Pageable pageable) {
        return repository.findAllByAutoGeneratedIsFalseOrderByDecimalNumber(pageable);
    }

    public Page<Document> getAll(Pageable pageable, String keyword) {
        return repository.findAllByDecimalNumberContainsIgnoreCaseAndAutoGeneratedIsFalseOrderByDecimalNumber(pageable, keyword);
    }

    public Document get(long id) {
        return repository.findById(id).orElseThrow(() -> new NotFoundException("Entity with id=" + id + " not found"));
    }

    public Document getByDecimalNumber(String decimalNumber) {
        return repository.findByDecimalNumberIgnoreCase(decimalNumber)
                .orElseThrow(() -> new NotFoundException("Not found document with decimal number=" + decimalNumber));
    }

    public void createOrUpdate(@Valid Document document) {
        Assert.notNull(document, "document must not be null");
        if (!document.isNew()) {
            repository.getExisted(document.id());
        } else {
            repository.findByDecimalNumberAndAutoGeneratedIsTrueIgnoreCase(document.getDecimalNumber())
                    .ifPresent(dbDocument -> document.setId(dbDocument.getId()));
        }
        repository.save(document);
    }

    public void delete(long id) {
        repository.deleteExisted(id);
    }

    public List<Applicability> getApplicabilities(long id) {
        repository.getExisted(id);
        return applicabilityRepository.findAllByDocumentId(id);
    }

    public void deleteApplicability(long id) {
        applicabilityRepository.deleteExisted(id);
    }

    public Applicability createApplicability(ApplicabilityTo applicabilityTo) {
        Assert.notNull(applicabilityTo, "applicabilityTo must not be null");
        Document document = repository.getExisted(applicabilityTo.getDocumentId());
        Document applicability = repository.findByDecimalNumberIgnoreCase(applicabilityTo.getDecimalNumber())
                .orElseGet(() -> repository.save(Document.autoGenerate(applicabilityTo.getDecimalNumber())));
        return applicabilityRepository.save(new Applicability(null, document, applicability, applicabilityTo.isPrimal()));
    }
}
